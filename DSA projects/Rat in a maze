#include <iostream>
#include <bits/stdc++.h>
using namespace std;

bool isSafe(int arr[][4], int row, int col, int i, int j, vector<vector<bool> > &visited)
{
    if ((i >= 0 && i < row) && (j >= 0 && j < col) && (arr[i][j] == 1) && (visited[i][j] == false))
    {
        return true;
    }
    else
    {
        return false;
    }
}

void solveMaze(int arr[][4], int row, int col, int i, int j, vector<string> &path, vector<vector<bool> > &visited, string output)
{
    // Base case
    if (i == row - 1 && j == col - 1)
    {
        path.push_back(output);
        return;
    }

    // Down (i+1,j)
    if (isSafe(arr, row, col, i + 1, j, visited))
    {
        visited[i + 1][j] = true;
        solveMaze(arr, row, col, i + 1, j, path, visited, output + 'D');

        // BackTracking
        visited[i + 1][j] = false;
    }

    // Left (i,j-1)
    if (isSafe(arr, row, col, i, j - 1, visited))
    {
        visited[i][j - 1] = true;
        solveMaze(arr, row, col, i, j - 1, path, visited, output + 'L');
        visited[i][j - 1] = false;
    }

    // Right (i,j+1)
    if (isSafe(arr, row, col, i, j + 1, visited))
    {
        visited[i][j + 1] = true;
        solveMaze(arr, row, col, i, j + 1, path, visited, output + 'R');
        visited[i][j+1] = false;
    }

    // UP (i-1, j)
    if (isSafe(arr, row, col, i - 1, j, visited))
    {
        visited[i - 1][j] = true;
        solveMaze(arr, row, col, i - 1, j, path, visited, output + 'U');
        visited[i-1][j] = false;
    }
}

int main()
{
    int maze[4][4] = {{1, 0, 0, 0},
                      {1, 1, 0, 1},
                      {1, 1, 0, 0},
                      {0, 1, 1, 1}};
    if (maze[0][0] == 0)
    {
        cout << "No Path Exist " << endl;
        return 0;
    }
    int row = 4;
    int col = 4;

    vector<vector<bool>> visited(row, vector<bool>(col, false));
    visited[0][0] == true;

    vector<string> path;
    string output = "";

    solveMaze(maze, row, col, 0, 0, path, visited, output);

    cout << "Printing all possible outputs " << endl;
    for (auto i : path)
    {
        cout << i << " ";
    }
    cout << endl;

    if (path.size() == 0)
    {
        cout << "Path not exist " << endl;
    }

    return 0;
}

